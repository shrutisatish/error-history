{"version":3,"sources":["components/filter-button.js","data.js","components/error-history.js","App.js","serviceWorker.js","index.js"],"names":["FilterButton","props","handleButtonFilterChange","index","event","filterItem","list","selected","state","isChecked","splice","indexOf","push","setState","onFilterChange","column_name","filterValue","selectAll","unSelectAll","isSelectAllChecked","length","openDropdown","resetFilterButton","closeDropdown","preventDefault","expanded","nextProps","this","activeFilterButton","className","onClick","handleDefault","icon","faFilter","type","onChange","checked","map","key","bind","Component","data","ErrorHistory","componentDidMount","errors","errorsTotal","listItems","uniq","error","selectedItems","selectedCheckboxError","searchErrors","update","$set","loaded","filter","a","errmsg","product_line","area","workspace","container","timestamp","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abc7b590.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { faFilter} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default class FilterButton extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            selected:this.props.list,\n            expanded: false\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.selected) {\n            this.setState({\n                selected: nextProps.selected,\n                expanded: nextProps.activeFilterButton === this.props.column_name\n            });\n        }\n    }\n\n    handleButtonFilterChange = (index, event) => {\n        let filterItem = this.props.list[index];\n            let selected = this.state.selected;\n        if (this.isChecked(filterItem)) {\n            selected.splice(selected.indexOf(filterItem), 1);\n        } else {\n            selected.push(filterItem);\n        }\n        return this.setState({\n            selected\n        }, () => {\n            this.props.onFilterChange(this.props.column_name, this.state.selected)\n\n        });\n    }\n\n    isChecked = (filterValue) => {\n        return this.state.selected.indexOf(filterValue) > -1;\n    }\n\n    selectAll = (event) => {\n        return this.setState({\n            selected: this.props.list\n        }, () => {\n            this.props.onFilterChange(this.props.column_name, this.state.selected)\n        });\n    }\n\n    unSelectAll = (event) => {\n        return this.setState({\n            selected: []\n        }, () => {\n            this.props.onFilterChange(this.props.column_name, this.state.selected)\n        });\n    }\n\n    isSelectAllChecked = () => {\n        let checked = true;\n        if (this.state.selected.length === this.props.list.length) {\n            return checked;\n        } else if (this.state.selected.length < this.props.list.length) {\n            return !checked;\n        }\n    }\n\n    openDropdown = () => {\n        this.props.resetFilterButton(this.props.column_name);\n    }\n\n    closeDropdown = (event) => {\n        event.preventDefault();\n        return this.setState({\n            expanded: false\n        });\n    }\n    \n    render() {\n        return (\n            <div className=\"filter-btn\" onClick={this.handleDefault}>\n                <FontAwesomeIcon icon={faFilter} onClick={this.openDropdown} />\n                {(this.state.expanded) && (\n                    <div className=\"option-list\">\n                        <span className=\"btn-close\" onClick={this.closeDropdown}>X</span>\n                        <p>Choose Filters</p>\n                        <ul>\n                            <div>\n                                {((this.state.selected.length < this.props.list.length) && (\n                                    <label className=\"main-label\"><input type=\"checkbox\" onChange={this.selectAll} checked={this.isSelectAllChecked()}/>Select All</label>\n                                ))}\n                                {((this.state.selected.length >= this.props.list.length) && (\n                                    <label className=\"main-label\"><input type=\"checkbox\" onChange={this.unSelectAll} checked={this.isSelectAllChecked()}/>Unselect All\n                                    </label>\n                                ))}\n                            \n                                { this.props.list.map((key, index) => \n                                    <li className=\"main-label-random\" key={key + index}>\n                                        <input type=\"checkbox\" onChange={this.handleButtonFilterChange.bind(this, index)} checked={this.isChecked(key)}/>{key}\n                                    </li>\n                                )}\n                            </div>\n                        </ul>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","export const data = [\n    {\"product_line\": \"CX900\",\"container\": \"Container 1\", \"area\": \"PCBPM\", \"workspace\": \"TestStation1\", \"errmsg\": \"failed test: u'step1'with error: 'Unable to start step1'\",\"timestamp\": \"Fri Feb 6 13:59:36 2020\"}, \n    {\"product_line\": \"CX901\",\"container\": \"Container 2\", \"area\": \"PCBPM\", \"workspace\": \"TestStation2\", \"errmsg\": \"failed test: u'step2'with error: 'Unable to start step2'\",\"timestamp\": \"Fri Feb 7 14:59:36 2020\"},\n    {\"product_line\": \"CX901\",\"container\": \"Container 3\", \"area\": \"PCB2M\", \"workspace\": \"TestStation3\", \"errmsg\": \"failed test: u'step3'with error: 'Unable to start step3'\",\"timestamp\": \"Fri Feb 8 15:59:36 2020\"},\n    {\"product_line\": \"CX902\",\"container\": \"Container 4\", \"area\": \"PCB3C\", \"workspace\": \"TestStation1\", \"errmsg\": \"failed test: u'step4'with error: 'Unable to start step4'\",\"timestamp\": \"Fri Feb 9 15:59:36 2020\"},\n    {\"product_line\": \"CX903\",\"container\": \"Container 5\", \"area\": \"PCB4C\", \"workspace\": \"TestStation2\", \"errmsg\": \"failed test: u'step5'with error: 'Unable to start step5'\",\"timestamp\": \"Fri Feb 10 16:59:36 2020\"},\n    {\"product_line\": \"CX904\",\"container\": \"Container 6\", \"area\": \"PCB5C\", \"workspace\": \"TestStation3\", \"errmsg\": \"failed test: u'step6'with error: 'Unable to start step6'\",\"timestamp\": \"Fri Feb 11 15:59:36 2020\"},\n    {\"product_line\": \"CX904\",\"container\": \"Container 5\", \"area\": \"PCB3C\", \"workspace\": \"TestStation1\", \"errmsg\": \"failed test: u'step7'with error: 'Unable to start step7'\",\"timestamp\": \"Fri Feb 12 14:59:36 2020\"},\n    {\"product_line\": \"CX905\",\"container\": \"Container 6\", \"area\": \"PCB4C\", \"workspace\": \"TestStation2\", \"errmsg\": \"failed test: u'step8'with error: 'Unable to start step8'\",\"timestamp\": \"Fri Feb 13 12:59:36 2020\"},\n    {\"product_line\": \"CX906\",\"container\": \"Container 6\", \"area\": \"PCB5C\", \"workspace\": \"TestStation3\", \"errmsg\": \"failed test: u'step9'with error: 'Unable to start step9'\",\"timestamp\": \"Fri Feb 14 13:59:36 2020\"},\n]","import React, { Component } from 'react'\nimport update from 'react-addons-update';\nimport FilterButton from './filter-button'\nimport uniq from 'lodash.uniq';\n\nimport { data } from './../data'\n\nexport default class ErrorHistory extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            errors : [],\n            errorsTotal:[],\n            loaded : false,\n            activeFilterButton : null,\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({\n            errors: data,\n            errorsTotal: data\n        })\n    }\n\n    listItems = (column_name) => {\n        return uniq(this.state.errorsTotal.map(error => error[column_name]))\n    }\n\n    selectedItems = (column_name) => {\n        return uniq(this.state.errors.map(error => error[column_name]));\n    }\n    \n    resetFilterButton = (column_name) => {\n        this.setState({\n            activeFilterButton : column_name\n        });\n    }\n    \n    onFilterChange = (column_name, selected) => {\n        let selectedCheckboxError = this.searchErrors(column_name, selected)\n        this.setState(update(this.state, {\n            errors: {\n                $set : selectedCheckboxError\n            }\n        }));\n    }\n    \n    searchErrors(column_name, selected) {\n        let filtered = this.state.errorsTotal.filter((error) => {\n            return selected.indexOf(error[column_name]) > -1\n        });\n        return filtered;\n    }\n\n    render() {\n        return (\n                <div className=\"errors\" onClick={this.handleDefault}>\n                    {   \n                        <div>\n                        <h1>Error History</h1>\n                        <span className=\"errors-count\">Total Number of Errors: {this.state.errors.length}</span>\n                            <table className=\"error-table\">\n                            <thead>\n                                <tr className='error-item'>\n                                    <th><FilterButton list={this.listItems('errmsg')} selected={this.selectedItems('errmsg')} column_name='errmsg' onFilterChange={this.onFilterChange} resetFilterButton={this.resetFilterButton} activeFilterButton={this.state.activeFilterButton}/>Errors</th>\n                                    <th><FilterButton list={this.listItems('product_line')} selected={this.selectedItems('product_line')} column_name='product_line' onFilterChange={this.onFilterChange} resetFilterButton={this.resetFilterButton} activeFilterButton={this.state.activeFilterButton}/>Production Line</th>\n                                    <th><FilterButton list={this.listItems('area')} selected={this.selectedItems('area')} column_name='area' onFilterChange={this.onFilterChange} resetFilterButton={this.resetFilterButton} activeFilterButton={this.state.activeFilterButton}/>Area</th>\n                                    <th><FilterButton list={this.listItems('workspace')} selected={this.selectedItems('workspace')} column_name='workspace' onFilterChange={this.onFilterChange} resetFilterButton={this.resetFilterButton} activeFilterButton={this.state.activeFilterButton}/>Test Station</th>\n                                    <th><FilterButton list={this.listItems('container')} selected={this.selectedItems('container')} column_name='container' onFilterChange={this.onFilterChange} resetFilterButton={this.resetFilterButton} activeFilterButton={this.state.activeFilterButton}/>Container</th>\n                                    <th><FilterButton list={this.listItems('timestamp')} selected={this.selectedItems('timestamp')} column_name='timestamp' onFilterChange={this.onFilterChange} resetFilterButton={this.resetFilterButton} activeFilterButton={this.state.activeFilterButton}/>Timestamp</th>\n                                </tr>\n        \n                            </thead>\n                            <tbody>\n                                {\n                                    this.state.errors.map((a, index) => {\n                                        return <tr className='error-item' key={index}>\n                                                    <td>{a.errmsg}</td>\n                                                    <td>{a.product_line}</td>\n                                                    <td>{a.area}</td>\n                                                    <td>{a.workspace}</td>\n                                                    <td>{a.container}</td>\n                                                    <td>{a.timestamp.toString() || a.timestamp}</td>\n                                                </tr>\n                                        })\n                                }\n                            </tbody>\n        \n                            </table>\n                        </div>\n                    }\n                </div>\n            );\n    \n        }\n}","import React from 'react';\nimport './App.css';\nimport ErrorHistory from './components/error-history'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ErrorHistory/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}